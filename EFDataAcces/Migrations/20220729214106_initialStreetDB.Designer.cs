// <auto-generated />
using System;
using EFDataAcces.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFDataAcces.Migrations
{
    [DbContext(typeof(StreetContext))]
    [Migration("20220729214106_initialStreetDB")]
    partial class initialStreetDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EFDataAcces.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("EFDataAcces.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("RemoteUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpotId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("SpotId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("EFDataAcces.Models.Spot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("GroupId");

                    b.ToTable("Spot");
                });

            modelBuilder.Entity("EFDataAcces.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId1")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Posts")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("GroupId1");

                    b.ToTable("User");
                });

            modelBuilder.Entity("EFDataAcces.Models.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("RemoteUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpotId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("SpotId");

                    b.ToTable("Video");
                });

            modelBuilder.Entity("EFDataAcces.Models.Image", b =>
                {
                    b.HasOne("EFDataAcces.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFDataAcces.Models.Spot", null)
                        .WithMany("images")
                        .HasForeignKey("SpotId");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("EFDataAcces.Models.Spot", b =>
                {
                    b.HasOne("EFDataAcces.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFDataAcces.Models.Group", null)
                        .WithMany("Spots")
                        .HasForeignKey("GroupId");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("EFDataAcces.Models.User", b =>
                {
                    b.HasOne("EFDataAcces.Models.Group", null)
                        .WithMany("Admin")
                        .HasForeignKey("GroupId");

                    b.HasOne("EFDataAcces.Models.Group", null)
                        .WithMany("Users")
                        .HasForeignKey("GroupId1");
                });

            modelBuilder.Entity("EFDataAcces.Models.Video", b =>
                {
                    b.HasOne("EFDataAcces.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFDataAcces.Models.Spot", null)
                        .WithMany("Videos")
                        .HasForeignKey("SpotId");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("EFDataAcces.Models.Group", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Spots");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("EFDataAcces.Models.Spot", b =>
                {
                    b.Navigation("Videos");

                    b.Navigation("images");
                });
#pragma warning restore 612, 618
        }
    }
}
